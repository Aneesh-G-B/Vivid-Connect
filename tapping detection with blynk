#define BLYNK_TEMPLATE_ID "TMPL3fxOD4Bz8"
#define BLYNK_TEMPLATE_NAME "monitor"
#define BLYNK_AUTH_TOKEN "zPDt35MmAajs9mRR0a2RMPvqCjvq1ZEz"

#include <WiFi.h>
#include <BlynkSimpleEsp32.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <math.h>

char auth[] = BLYNK_AUTH_TOKEN;
char ssid[] = "realme GT NEO 3T";
char pass[] = "12345678";

// OLED Display
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET    -1
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// ESP32 GPIOs
#define ZMCT_PIN     35    // Current sensor analog pin
#define RELAY_PIN    26    // Relay output pin
#define BUZZER_PIN   23    // Buzzer output pin

// Constants
const float FIXED_VOLTAGE = 226.0;       // Fixed voltage display (V)
const float OFFSET_VOLTAGE = 1.65;       // Center voltage for sensor
const float TAPPING_THRESHOLD = 0.2;     // Trigger alert if current > 0.2 A
const float SENSITIVITY = 4000.0;        // Increased for high resolution in mA

void setup() {
  Serial.begin(115200);
  Blynk.begin(auth, ssid, pass);
  pinMode(RELAY_PIN, OUTPUT);
  pinMode(BUZZER_PIN, OUTPUT);
  digitalWrite(RELAY_PIN, LOW);
  digitalWrite(BUZZER_PIN, LOW);

  Wire.begin(21, 22); // SDA, SCL

  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println("OLED init failed!");
    while (1);
  }

  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(0, 0);
  display.println("GridSense AI+ Booting...");
  display.display();
  delay(1500);
}

void loop() {
  Blynk.run();
  float currentRMS = detectCurrentPeak();         // in A
  float voltageRMS = FIXED_VOLTAGE;               // fixed

  // Clamp base current at 0.14 A if lower
  if (currentRMS < 0.14) currentRMS = 0.14;

  float power = voltageRMS * currentRMS;          // in W

  // Display data
  display.clearDisplay();
  display.setCursor(0, 0);
  display.print("Voltage: "); display.print(voltageRMS, 1); display.println(" V");
  display.print("Current: "); display.print(currentRMS, 2); display.println(" A");
  display.print("Power:   "); display.print(power, 2); display.println(" W");

  Blynk.virtualWrite(V0, voltageRMS);
  Blynk.virtualWrite(V1, currentRMS);
  Blynk.virtualWrite(V2, power);

  // Tapping detection
  if (currentRMS > TAPPING_THRESHOLD) {
    display.setCursor(0, 50);
    display.println("\xEF\xB8\xB0 TAPPING DETECTED");
    Blynk.virtualWrite(V3, "âš  TAPPING DETECTED");
    display.display();
    delay(2000);  // Wait 2 seconds after displaying message
    digitalWrite(RELAY_PIN, HIGH);
    digitalWrite(BUZZER_PIN, HIGH);
  } else {
    digitalWrite(RELAY_PIN, LOW);
    digitalWrite(BUZZER_PIN, LOW);
    Blynk.virtualWrite(V3, "Normal");
    display.display();
  }

  Serial.printf("V=%.1f V  I=%.2f A  P=%.2f W\n", voltageRMS, currentRMS, power);
  delay(1000);
}

float detectCurrentPeak() {
  int peakRaw = 0;
  int baseRaw = 4095;
  for (int i = 0; i < 1000; i++) {
    int raw = analogRead(ZMCT_PIN);
    if (raw > peakRaw) peakRaw = raw;
    if (raw < baseRaw) baseRaw = raw;
    delayMicroseconds(200);
  }
  float peakVoltage = (peakRaw - baseRaw) * (3.3 / 4095.0) / 2.0;  // Convert peak-to-peak to amplitude
  float current_mA = peakVoltage * SENSITIVITY; // empirical mapping
  return current_mA / 1000.0;  // return in Amps
}
